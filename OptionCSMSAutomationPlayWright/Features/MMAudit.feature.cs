// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OptionCSMSAutomationPlayWright.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MMAudit")]
    public partial class MMAuditFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "MMAudit.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "MMAudit", "This is to verify whether MM Transactions are happened without any fail by cross " +
                    "checking all the MM Reports", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("001_To generate the Daily MM audit report for all the MM schools and confirm the " +
            "transactions are correct")]
        [NUnit.Framework.CategoryAttribute("Sprint_01")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        public virtual void _001_ToGenerateTheDailyMMAuditReportForAllTheMMSchoolsAndConfirmTheTransactionsAreCorrect()
        {
            string[] tagsOfScenario = new string[] {
                    "Sprint_01",
                    "Functional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("001_To generate the Daily MM audit report for all the MM schools and confirm the " +
                    "transactions are correct", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "URL",
                            "Username",
                            "Password"});
                table1.AddRow(new string[] {
                            "https://acutis.optionc.com/",
                            "jclement@optionc.com",
                            "viper@123"});
#line 8
 testRunner.Given("Acutis User has successfully launched", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "SchoolCode",
                            "StartDate"});
                table2.AddRow(new string[] {
                            "16000",
                            "05/06/2025"});
                table2.AddRow(new string[] {
                            "6929",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "6904",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "7291",
                            "07/02/2025"});
                table2.AddRow(new string[] {
                            "8417",
                            "05/24/2025"});
                table2.AddRow(new string[] {
                            "7304",
                            "05/28/2025"});
                table2.AddRow(new string[] {
                            "5158",
                            "06/28/2025"});
                table2.AddRow(new string[] {
                            "8518",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "221",
                            "08/15/2025"});
                table2.AddRow(new string[] {
                            "7301 St. Bridget School - River Falls",
                            "06/26/2025"});
                table2.AddRow(new string[] {
                            "8232",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "7292",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "7285",
                            "06/26/2025"});
                table2.AddRow(new string[] {
                            "8407",
                            "08/05/2025"});
                table2.AddRow(new string[] {
                            "8958",
                            "06/30/2025"});
                table2.AddRow(new string[] {
                            "8298",
                            "06/09/2025"});
#line 11
 testRunner.And("Open all the MM schools and audit the fee details everyday", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
